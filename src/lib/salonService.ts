import { supabase } from './supabase';

interface SalonData {
  id: string;
  name: string;
  subdomain: string;
  public_profile_photo_url: string | null;
  public_display_name: string | null;
}

interface SalonResponse {
  success: boolean;
  salon?: SalonData;
  error?: string;
}

export const salonService = {
  // Buscar sal√£o pelo subdom√≠nio usando RPC
  async getSalonBySlug(subdomain: string): Promise<SalonResponse> {
    try {
      console.log('üîç Buscando sal√£o pelo subdom√≠nio:', subdomain);
      
      const { data, error } = await supabase.rpc('get_salon_by_subdomain', {
        p_subdomain: subdomain
      });

      if (error) {
        console.error('‚ùå Erro RPC ao buscar sal√£o:', error);
        return {
          success: false,
          error: error.message || 'Sal√£o n√£o encontrado'
        };
      }

      if (!data || !Array.isArray(data) || data.length === 0) {
        console.log('‚ùå Sal√£o n√£o encontrado para subdom√≠nio:', subdomain);
        return {
          success: false,
          error: 'Sal√£o n√£o encontrado'
        };
      }

      const salon = data[0]; // RPC retorna array, pegar primeiro elemento
      console.log('‚úÖ Sal√£o encontrado:', salon.name);
      return {
        success: true,
        salon: salon
      };

    } catch (err) {
      console.error('üí• Erro inesperado ao buscar sal√£o:', err);
      return {
        success: false,
        error: 'Erro inesperado ao buscar sal√£o'
      };
    }
  },

  // Verificar se subdom√≠nio est√° dispon√≠vel
  async isSlugAvailable(subdomain: string): Promise<boolean> {
    try {
      const { data, error } = await supabase.rpc('get_salon_by_subdomain', {
        p_subdomain: subdomain
      });

      // Se houve erro ou n√£o encontrou dados, subdom√≠nio est√° dispon√≠vel
      return error !== null || !data || !Array.isArray(data) || data.length === 0;
    } catch {
      return true;
    }
  },

  // Buscar configura√ß√µes p√∫blicas do sal√£o (para p√°ginas p√∫blicas)
  async getPublicSalonConfig(subdomain: string): Promise<any> {
    try {
      const { data, error } = await supabase.rpc('get_salon_by_subdomain', {
        p_subdomain: subdomain
      });

      if (error || !data || !Array.isArray(data) || data.length === 0) {
        return null;
      }

      const salon = data[0]; // RPC retorna array, pegar primeiro elemento
      return {
        id: salon.id,
        name: salon.name,
        subdomain: salon.subdomain,
        displayName: salon.public_display_name || salon.name,
        profilePhotoUrl: salon.public_profile_photo_url
      };

    } catch {
      return null;
    }
  }
}; 